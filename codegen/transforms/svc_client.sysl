CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^([A-Z]+[a-z]+|[A-Z]+|[a-z]+)$", word) then [word] else FindAllString("[a-z]+|[A-Z][a-z]+|[A-Z]+", word, -1)
      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(w)
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view GoType(t <: sysl.Type) -> string:
    t -> (:
      let IsPtr = if t.optional == true && t.type != "sequence" then "*" else ""
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "double"
          "INT" => "int64"
          "FLOAT" => "float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "bool"
          "DATE" => "date.Date"
          "DATETIME" => "time.Time"
        "sequence" => "[]" + GoType(t.sequence).out
        else GoName(t.type_ref).out
      out = IsPtr + typeName
    )

  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "service.go"
    )

  !view GoInterfaces(unions <: set of Type) -> sequence of TopLevelDecl:
    unions -> (union:
        Comment = '// ' + union.key + ' ...'
        Declaration = union -> <Declaration>(:
          InterfaceType = union -> <InterfaceType>(:
            InterfaceName = GoName(.key).out
            let methodName = "Is" + .key
            MethodSpec = [methodName] -> <sequence of MethodSpec> (name:
              MethodName = name
              Signature = "" -> <Signature> (:
                Parameters = true
              )
            )
            MethodDecl = union.value.fields -> <sequence of MethodDecl> (receiverName:
              Receiver = receiverName -> <Receiver>(:
                ReceiverType = "*" + receiverName
              )
              FunctionName = methodName
              Signature = receiverName -> <Signature> (:
                Parameters = true
              )
            )
          )
        )
    )

  !view methodName(method <: string, urlPath <: string) -> string:
    method -> (:
      let path = Replace(urlPath, "/", "_", -1)
      let path2 = Replace(path, "{", "", -1)
      let path3 = Replace(path2, "}", "", -1)
      out = GoName(Title(ToLower(method)) + path3).out
    )

  !view clientName(name <: string) -> string:
    name -> (:
      out = GoName(name).out + "Client"
    )

  !view makeGetArgExpr(lhs <: string, rhs <: string) -> Expression:
    lhs -> (:
      GetArg = lhs -> <GetArg>(:
        LHS = lhs
        RHS = rhs
      )
    )

  !view makeValueExpr(strValue <: string) -> FuncArgsRest:
    strValue -> (:
      Expression = strValue -> <Expression>(:
        ValueExpr = strValue
      )
    )

  !view makeFunctionZero(funcName <: string) -> Expression:
    funcName -> (:
      FunctionCall = funcName -> <FunctionCall>(:
        FunctionName = funcName
      )
    )

  !view makeFunctionOneArg(funcName <: string, arg0 <: Expression) -> Expression:
    funcName -> (:
      FunctionCall = funcName -> <FunctionCall>(:
        FunctionName = funcName
        FunctionArgs = funcName -> <FunctionArgs> (:
          Expression = arg0.Expression
        )
      )
    )
    
  !view makeFunctionCall(funcName <: string, arg0 <: Expression, rest <: sequence of Expression) -> FuncArgsRest:
    funcName -> (:
      Expression = funcName -> <Expression>(:
        FunctionCall = funcName -> <FunctionCall>(:
          FunctionName = funcName
          FunctionArgs = funcName -> <FunctionArgs> (:
            Expression = arg0.Expression
            FuncArgsRest = rest -> <FuncArgsRest> (:
              Expression = .Expression
            )
          )
        )
      )
    )

  !view formatArgs(ep <: sysl.Endpoint) -> string:
    ep -> (:
      let terms = ep.value.pathvars -> <out> (:
        out = "{" + .name + "}"
      )
      let terms2 = terms flatten(.out)
      let path = Split(ep.value.path, "/")
      let path2 = path -> <sequence of string> (p:
        out  = if p in terms2 then "%v" else p
      )
      let path3 = path2 flatten(.out)
      formatArgs = '"%s' + Join(path3, "/") + '"'
    )

  !view urlVariable(ep <: sysl.Endpoint) -> StatementList:
    ep -> (:
      Statement = ep -> <Statement> (:
        DeclareAndAssignStmt = ep -> <DeclareAndAssignStmt> (:
          Variables = "u, err"
          let sprintfArg = formatArgs(ep).formatArgs
          let params = ep.value.pathvars -> <FuncArgsRest> (:
            Expression =  makeValueExpr(.name).Expression
          )
          let getArgExpr = ep -> <FuncArgsRest> (:
            Expression = makeGetArgExpr("s", "url")
          )
          let restArg = [getArgExpr] | params
          let sprintfCall = makeFunctionCall("fmt.Sprintf", makeValueExpr(sprintfArg), restArg)
          Expression = makeFunctionOneArg("url.Parse", sprintfCall)
        )
      )
    )

  !view callRestLib(ep <: string) -> StatementList:
    ep -> (:
      Statement = ep -> <Statement> (:
        ReturnStmt = ep -> <ReturnStmt> (:

          let body = ep.value.params where("body" in .attrs.patterns) -> <FuncArgsRest> (:
            Expression = makeValueExpr(ToLower(Join(Split(.name, "_"), ""))).Expression
          )
          
          let nilExpr = ep -> <FuncArgsRest> (:
            Expression = makeValueExpr("nil").Expression
          )

          let body2 = if body count == 0 then [nilExpr] else body
          let functionZeroExpr = ep -> <FuncArgsRest>(:
            Expression = makeFunctionZero("u.String")
          )
          let getArgExpr = ep -> <FuncArgsRest> (:
            Expression = makeGetArgExpr("s", "client")
          )
          let restofArgs = [getArgExpr, makeValueExpr('"' + ep.value.method + '"'), functionZeroExpr] | body2 | [makeValueExpr("headers"), makeValueExpr("required") , makeValueExpr("responses")]

          Expression =  makeFunctionCall("restlib.DoHTTPRequest", makeValueExpr("ctx"), restofArgs).Expression
        )
      )
    )

  !view callHttpMethodWithNoQueryArgs(methodName <: string, ep <: sysl.Endpoint) -> StatementList:
    ep -> (:
      Statement = ep -> <Statement> (:
        DeclareAndAssignStmt = ep -> <DeclareAndAssignStmt> (:
          Variables = "resp, err"
          let args = buildSprintfCall(ep)
          let params = ep.value.pathvars -> <FuncArgsRest> (:
            Expression =  makeValueExpr(.name).Expression
          )
          let getArgExprUrl = ep -> <FuncArgsRest> (:
            Expression = makeGetArgExpr("s", "url")
          )
          let getArgExprClient = ep -> <FuncArgsRest> (:
            Expression = makeGetArgExpr("s", "client")
          )
          let restArg = [getArgExprUrl] | params
          let sprintfCall = makeFunctionCall("fmt.Sprintf", makeValueExpr(args.formatArgs), restArg)
          Expression = makeFunctionCall("restlib.DoHTTPRequest", getArgExprClient, [ makeValueExpr("ctx"), makeValueExpr('"' + methodName + '"'), sprintfCall, makeValueExpr("responses")] ).Expression
        )
      )   
    )

  !view declareReturnTypeArray(variableName <: string, typeName <: string, values <: sequence of string) -> StatementList:
    typeName -> (:
      Statement = typeName -> <Statement> (:
        DeclareAndAssignStmt = typeName -> <DeclareAndAssignStmt> (:
          Variables = variableName
          Expression = typeName -> <Expression> (:
            NewSlice = typeName -> <NewSlice> (:
              TypeName = typeName
              let v = values -> <sequence of string> (v:
                out = '&' + v.type + '{}'
              )
              SliceValues = Join(v flatten(.out), ',')
            )
          )   
        )
      )
    )

  !view declareHeaders(variableName <: string, typeName <: string, values <: sequence of string) -> StatementList:
    typeName -> (:
      Statement = typeName -> <Statement> (:
        DeclareAndAssignStmt = typeName -> <DeclareAndAssignStmt> (:
          Variables = variableName
          Expression = typeName -> <Expression> (:
            NewSlice = typeName -> <NewSlice> (:
              TypeName = typeName
              let v = values -> <string> (:
                out = '"' + . + '"'
              )
              SliceValues = Join(v flatten(.out), ',')
            )
          )   
        )
      )
    )

  !view addToContextCall(variable <: string, methodName <: string) -> StatementList:
    variable -> (:
      Statement = variable -> <Statement> (:
        AssignStmt = variable -> <AssignStmt> (:
          Variables = "ctx"
          Expression = makeFunctionCall(methodName, makeValueExpr("ctx"), [makeValueExpr(variable)]).Expression
        )
      )
    )

  !view returnOutAndErr(name <: string) -> StatementList:
    name -> (:
      Statement = name -> <Statement> (:
        ReturnStmt = name -> <ReturnStmt> (:
          PayLoad = Join(["resp", name, "err"], ",")
        )
      )   
    )

  !view addQueryParams(ep <: sysl.Endpoint) -> sequence of StatementList:
    ep.value.queryvars where (.optional == false) -> (qparam:
      let varName = ToLower(Join(Split(qparam.name, "_"),""))
      let valueExpr = if GoType(qparam).out ==:
        "string" => makeValueExpr(varName)
        else makeFunctionCall("fmt.Sprintf", makeValueExpr('"' +"%v" + '"'), [makeValueExpr(varName)])
      Statement = makeFunctionCall("q.Add", makeValueExpr( '"' + qparam.name + '"'), [valueExpr]).Expression
    )

  !view addOptionalQueryParams(ep <: sysl.Endpoint) -> sequence of StatementList:
    ep.value.queryvars where (.optional == true) -> (qparam:
      let varName = ToLower(Join(Split(qparam.name, "_"),""))
      Statement = qparam -> <Statement> (:
        IfElseStmt = qparam -> <IfElseStmt> (:
          Expression = makeValueExpr(varName + " != nil").Expression
          Block = qparam -> <Block> (:
            let stmt = qparam -> <StatementList> (:
              let valueExpr = if GoType(qparam).out ==:
                "*string" => makeValueExpr("*" + varName)
                else makeFunctionCall("fmt.Sprintf", makeValueExpr('"' +"%v" + '"'), [makeValueExpr(varName)])
              Statement = makeFunctionCall("q.Add", makeValueExpr( '"' + qparam.name + '"'), [valueExpr]).Expression
            )
            StatementList = [stmt]
          )
        )
      )
    )

  !view declareQueryVar(name <: string) -> StatementList:
    name -> (:
      Statement = name -> <Statement> (:
        DeclareAndAssignStmt = name -> <DeclareAndAssignStmt> (:
          Variables = name
          Expression = makeFunctionZero("u.Query")
        )
      )
    )

  !view updateRawQuery(name <: string) -> StatementList:
    name -> (:
      Statement = name -> <Statement> (:
        AssignStmt = name -> <AssignStmt> (:
          Variables = "u.RawQuery"
          Expression = makeFunctionZero("q.Encode")
        )
      )
    )
  
  !view returnIfError(argName <: string, returnVar <: string) -> StatementList:
    argName -> (:
      Statement = argName -> <Statement> (:
        IfElseStmt = argName -> <IfElseStmt> (:
          Expression = makeValueExpr(argName + " != nil").Expression
          Block = returnVar -> <Block> (:
            let stmt = returnVar -> <StatementList> (:
              Statement = returnVar -> <Statement> (:
                ReturnStmt = returnVar -> <ReturnStmt> (:
                  PayLoad = returnVar
                )
              )   

            )
            StatementList = [stmt]
          )
        )
      )
    )

  !view splitPayload(payload <: set of string) -> string:
    payload -> (:
      type = GoName(.).out
    )

  !view splitReturnTypes(types <: map) -> sequence of string:
    types -> (v:
      type = GoName(v.value).out
    )  

  !view HttpMethodStatments(ep <: sysl.Endpoint) -> Block:
    ep -> (:
      let requiredHeaders = ep.value.params where("header" in .attrs.patterns && "required" in .attrs.patterns)
      let required = declareHeaders("required", "string", requiredHeaders flatten(.attrs.name))
      let resultTypes = if ep.value.ret.payload == null then splitReturnTypes(ep.value.ret) else splitPayload(Split(ep.value.ret.payload, ', '))
      let responses = declareReturnTypeArray("responses", "interface{}", resultTypes)

      let stmts =  [required, responses, urlVariable(ep), returnIfError("err", "nil, err")]
      StatementList = if ep.value.queryvars count ==:
       0 => stmts | [callRestLib(ep)]
       else stmts | [declareQueryVar("q")] | addQueryParams(ep) | addOptionalQueryParams(ep) | [updateRawQuery("") , callRestLib(ep)]
    )

  !view ClientMethods(appName <: string, eps <: set of sysl.Endpoints) -> sequence of TopLevelDecl:
    eps -> (ep:
      let funcName = methodName(ep.value.method, ep.value.path).out
      Comment = '// ' + funcName + ' ...'
      MethodDecl = ep -> <MethodDecl>(:
        Receiver = ep -> <Receiver>(:
          ReceiverType = "s *Client"
        )
        FunctionName = funcName
        Signature = methodSignature(ep)
        Block = HttpMethodStatments(ep)
      )
    )

  !view makeResultOnePlus(ret0 <: string, retN <: sequence of string) -> Result:
    ret0 -> (:
      ReturnTypes = ret0 -> <ReturnTypes> (:
        TypeName = ret0
        ResultTypeList = retN -> <sequence of ResultTypeList> (tname:
          TypeName = tname
        )
      )
    )

  !view methodSignature(ep <: sysl.Endpoint) -> Signature:
    ep -> (:
      Parameters = ep -> <Parameters>(:
        ParameterList = ep -> <ParameterList>(:
          ParameterDecl = ep -> <ParameterDecl>(:
            Identifier = "ctx"
            TypeName = "context.Context"
          )

          let httpHeader = ep -> <ParameterList>(:
            ParameterDecl = ep -> <ParameterDecl>(:
              Identifier = "headers"
              TypeName = "map[string]string"
            )
          )
          let bodyList = ep.value.params where ("body" in .attrs.patterns ) -> <sequence of ParameterDeclC>(p:
            ParameterDecl = p -> <ParameterDecl>(:
              Identifier = ToLower(Join(Split(p.name, "_"), ""))
              let typeName = GoType(p).out
              TypeName = "*" + typeName
            )
          )
          let paramList = ep.value.pathvars | ep.value.queryvars
          let paramTemp  = paramList -> <sequence of ParameterDeclC>(p:
            ParameterDecl = p -> <ParameterDecl>(:
              Identifier = ToLower(Join(Split(p.name, "_"), ""))
              let typeName = GoType(p).out
              TypeName = typeName
            )
          )
          ParameterDeclC = [httpHeader] | bodyList | paramTemp
        )
      )
      Result = makeResultOnePlus("*restlib.HTTPResult", ["error"])
    )

  !view GoMethods(eps <: set of sysl.Endpoints) -> sequence of MethodSpec:
    eps -> (ep:
      MethodName = methodName(ep.value.method, ep.value.path).out
      Signature = methodSignature(ep)
    )

  !view varDecl(name <: string, typeName <: string) -> TopLevelDecl:
    name -> (:
      Comment = "// Reference imports to suppress unused errors"    
      Declaration = name -> <Declaration> (:
        VarDeclWithVal = name -> <VarDeclWithVal> (:
          identifier = name
          Expression = makeValueExpr(typeName).Expression
        )
      )
    )

  !view goFile(app <: sysl.App) -> goFile:
    app -> (:

      PackageClause = app -> <package> (:
        let pname = if .attrs.package != null then .attrs.package else app.name
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let restLib = "github.com/anz-bank/syslgen-examples/pkg/restlib"
        let spec = ["context", "fmt", "net/http", "net/url", "time", "", "github.com/rickb777/date", restLib] -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec
      )

      let svcInterface = [.name] -> <sequence of TopLevelDecl> (name:
        let title = "Service"
        Comment = "// Service interface for "  + name
        Declaration = title -> <Declaration>(:
          InterfaceType = title -> <InterfaceType>(:
            InterfaceName = title
            MethodSpec =  GoMethods(app.endpoints)
          )
        )
      )
      
      let clientStruct = [.name] -> <sequence of TopLevelDecl> (name:
        Comment = "// Client for " + name + " API"
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = "Client"

            let urlField = name -> <FieldDecl>(:
              identifier = "url"
              Type = "string"
            )

            let client = name -> <FieldDecl>(:
              identifier = "client"
              Type = "*http.Client"
            )

            FieldDecl = [client, urlField]
          )
        )
      )

      let makeClient = [.name] -> <sequence of TopLevelDecl> (name:
        Comment = "// NewClient for " + name
        FunctionDecl = name -> <FunctionDecl>(:
          FunctionName = "NewClient"
          Signature = name -> <Signature> (:
            Parameters = name -> <Parameters>(:
              ParameterList = name -> <ParameterList>(:

                let urlField = name -> <ParameterDecl>(:
                    Identifier = "serviceURL"
                    TypeName = "string"
                )

                ParameterDecl = name -> <ParameterDecl>(:
                  Identifier = "client"
                  TypeName = "*http.Client"
                )
                ParameterDeclC = [urlField] -> <sequence of ParameterDeclC>(p:
                  ParameterDecl = p -> <ParameterDecl>(:
                    Identifier = p.Identifier
                    TypeName = p.TypeName
                  )
                )
              )
            )

            Result = name -> <Result> (:
              TypeName = "*Client"
            )
          )
          Block = name -> <sequence of Block>(item:
            StatementList = [item] -> <sequence of StatementList>(item:
              Statement = item -> <Statement> (:
                ReturnStmt = item -> <ReturnStmt> (:
                  PayLoad = "&Client{client, serviceURL}"
                )
              )
            )
          )
        )
      )
      Comment = "//\n//    THIS IS AUTOGENERATED BY sysl \n//\n"
      
      TopLevelDecl = GoInterfaces(app.union) | svcInterface | clientStruct |  makeClient  |  ClientMethods(.name, app.endpoints)
    )
