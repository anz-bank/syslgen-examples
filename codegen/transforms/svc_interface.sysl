CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^([A-Z]+[a-z]+|[A-Z]+|[a-z]+)$", word) then [word] else FindAllString("[a-z]+|[A-Z][a-z]+|[A-Z]+", word, -1)
      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(w)
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view ParamType(t <: sysl.Type) -> string:
    t -> (:
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "Double"
          "INT" => "Int64"
          "FLOAT" => "Float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "Bool"
          "DATE" => "Date"
          "DATETIME" => "Time"
        else "string"
      out = typeName
    )
    
  !view paramDecl(identifier <: string, typeName <: string) -> ParameterDeclC:
    identifier -> (:
      ParameterDecl = identifier -> <ParameterDecl>(:
        Identifier = identifier
        TypeName = typeName
      )
    )

  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "serviceInterface.go"
    )
        
  !view methodDef(ep <: sysl.Endpoint) -> string:
    ep -> (:
      let terms = ep.value.pathvars -> <out> (:
        out = "{" + .name + "}"
      )
      let pathVars = terms flatten(.out)
      let path = Split(ep.value.path, "/")
      let method = Title(ToLower(ep.value.method))

      let methodPostfix = path -> <sequence of string> (p:
        let postfix  = if p in pathVars then Join(ep.value.pathvars flatten(.name), "") else p
        out = Title(ToLower(postfix))
      )

      methodName = GoName(method + Join(methodPostfix flatten(.out), "")).out
    )
    
  !view panicBlock(methodName <: string) -> Block:
    methodName -> (:
      StatementList = [methodName] -> <StatementList> (:
        Statement = methodName -> <Statement> (:
          FunctionCall = methodName -> <FunctionCall> (:
            FunctionName = "panic"
            FunctionArgs = methodName -> <FunctionArgs> (:
              Expression = methodName -> <Expression> (:
                FunctionCall = methodName -> <FunctionCall> (:
                  FunctionName = "errors.New"
                  FunctionArgs = methodName -> <FunctionArgs> (:
                    Expression = methodName -> <Expression> (:
                      ValueExpr = '"not implemented"'
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
    
  !view getAllParams(ep <: sysl.Endpoint) -> AllParams:
    ep -> (:
      let queryParams = ep.value.queryvars -> <sequence of QueryParams> (param:
        arg = GoName(param.name).out+ " string"
      )
      let pathParams = ep.value.pathvars -> <sequence of PathParams> (param:
        arg = GoName(param.name).out + " string"
      )
      let reqHeaderParams = ep.value.params where("header" in .attrs.patterns && "required" in .attrs.patterns) -> <sequence of HeaderParams> (param:
        paramName =  GoName(param.name).out
      )
      let optHeaderParams = ep.value.params where("header" in .attrs.patterns && "optional" in .attrs.patterns) -> <sequence of HeaderParams> (param:
        paramName = GoName(param.name).out
      )
      let bodyParams = ep.value.params where("body" in .attrs.patterns) -> <sequence of BodyParams> (param:
        arg = param.name + " " + GoName(param.type_ref).out
      )
      AllParams = queryParams flatten(.arg) | pathParams flatten(.arg) | bodyParams flatten(.arg) | reqHeaderParams flatten(.paramName) | optHeaderParams flatten(.paramName)
    )

  !view epHandlerMethodSpecs(eps <: set of sysl.Endpoints) -> sequence of MethodSpec:
    eps -> (ep:
      let allParams = getAllParams(ep)
      let hasNoPayload = if ep.value.ret.payload == null then true else false
      MethodName = methodDef(ep).methodName
      Signature = ep -> <Signature> (:
        Parameters = ep -> <Parameters>(:
          ParameterList = ep -> <ParameterList>(:
            ParameterDecl = if ep.value.params where("header" in .attrs.patterns) count > 0 then paramDecl(Join(allParams.AllParams, ", "), "string").ParameterDecl else paramDecl(Join(allParams.AllParams, ", "), "").ParameterDecl
          )
        )
        Result = ep -> <Result>(:
          let resultTypes = if hasNoPayload then splitReturnTypes(ep.value.ret) else splitPayload(Split(ep.value.ret.payload, ', ')) 
          let tempType = if resultTypes count > 0 then "map[string]string, " + Join(resultTypes flatten(.typeName),", ") + ")" else "map[string]string)"
          TypeName = if hasNoPayload then "(" + tempType else "(int, " + tempType 
        )
      )
    )

  !view splitPayload(payload <: set of string) -> string:
    payload -> (:
      typeName = '*' + GoName(.).out
    )

  !view splitReturnTypes(types <: map) -> sequence of string:
    types -> (v:
      typeName = '*' + GoName(v.value).out
    )

  !view epHandlerMethodDecl(eps <: set of sysl.Endpoints, receiverType <: string) -> sequence of TopLevelDecl:
    eps -> (ep:
      let allParams = getAllParams(ep)
      let hasNoPayload = if ep.value.ret.payload == null then true else false
      let methodName = methodDef(ep).methodName
      Comment = "// nolint:gocritic\n// "  + methodName + " ..."
      MethodDecl = ep -> <MethodDecl>(:
        Receiver = ep -> <Receiver>(:
          ReceiverType = "d *" + receiverType
        )
        FunctionName = methodName

        Signature = ep -> <Signature> (:
          Parameters = ep -> <Parameters>(:
            ParameterList = ep -> <ParameterList>(:
              ParameterDecl = if ep.value.params where("header" in .attrs.patterns) count > 0 then paramDecl(Join(allParams.AllParams, ", "), "string").ParameterDecl else paramDecl(Join(allParams.AllParams, ", "), "").ParameterDecl
            )
          )
          Result = ep -> <Result>(:
            let resultTypes = if hasNoPayload then splitReturnTypes(ep.value.ret) else splitPayload(Split(ep.value.ret.payload, ', ')) 
            let tempType = if resultTypes count > 0 then "map[string]string, " + Join(resultTypes flatten(.typeName),", ") + ")" else "map[string]string)"
            TypeName = if hasNoPayload then "(" + tempType else "(int, " + tempType 
          )
        )
        Block = panicBlock(methodName)
      )
    )

  !view authHeaderMethodSpec(methodName <: string) -> MethodSpec:
    methodName -> (:
      MethodName = methodName
      Signature = methodName -> <Signature> (:
        Parameters = methodName -> <Parameters>(:
          ParameterList = methodName -> <ParameterList>(:
            ParameterDecl = paramDecl("r", "*http.Request").ParameterDecl
            ParameterDeclC = [paramDecl("authHeader", "string")]
          )
        )

        Result = methodName -> <Result>(:
          TypeName = "bool"
        )
      )
    )

  !view authHeaderMethodDecl(methodName <: string, receiverType <: string) -> TopLevelDecl:
    methodName -> (:
      Comment = "// nolint:gocritic\n// "  + methodName + " ..."
      MethodDecl = methodName -> <MethodDecl>(:
        Receiver = methodName -> <Receiver>(:
          ReceiverType = "d *" + receiverType
        )
        FunctionName = methodName

        Signature = methodName -> <Signature> (:
          Parameters = methodName -> <Parameters>(:
            ParameterList = methodName -> <ParameterList>(:
              ParameterDecl = paramDecl("r", "*http.Request").ParameterDecl
              ParameterDeclC = [paramDecl("authHeader", "string")]
            )
          )

          Result = methodName -> <Result>(:
            TypeName = "bool"
          )
        )

        Block = panicBlock(methodName)
      )
    )

  !view errResponseMethodSpec(methodName <: string) -> MethodSpec:
    methodName -> (:
      MethodName = methodName
      Signature = methodName -> <Signature> (:
        Parameters = methodName -> <Parameters>(:
          ParameterList = methodName -> <ParameterList>(:
            ParameterDecl = paramDecl("statusCode", "int").ParameterDecl 
            ParameterDeclC = [paramDecl("message", "string"), paramDecl("errObj", "error")]
          )
        )

        Result = methodName -> <Result> (:
          TypeName = "interface{}"
        )
      )
    )

  !view errResponseMethodDecl(methodName <: string, receiverType <: string) -> TopLevelDecl:
    methodName -> (:
      Comment = "// nolint:gocritic\n// "  + methodName + " ..."
      MethodDecl = methodName -> <MethodDecl>(:
        Receiver = methodName -> <Receiver>(:
          ReceiverType = "d *" + receiverType
        )
        FunctionName = methodName
        Signature = methodName -> <Signature> (:
          Parameters = methodName -> <Parameters>(:
            ParameterList = methodName -> <ParameterList>(:
              ParameterDecl = paramDecl("statusCode", "int").ParameterDecl 
              ParameterDeclC = [paramDecl("message", "string"), paramDecl("errObj", "error")]
            )
          )

          Result = methodName -> <Result> (:
            TypeName = "interface{}"
          )
        )

        Block = panicBlock(methodName)
      )
    )

  !view goFile(app <: sysl.App) -> goFile:
    app -> (:

      PackageClause = app -> <package> (:
        let pname = if .attrs.package != null then .attrs.package else app.name
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let spec = ["net/http", "errors"] -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec
      )

      let svcImplInterface = [.name] -> <sequence of TopLevelDecl> (name:
        let title = "ServiceInterface"
        Comment = "// ServiceInterface for "  + name
        Declaration = title -> <Declaration>(:
          InterfaceType = title -> <InterfaceType>(:
            InterfaceName = title
            MethodSpec =  epHandlerMethodSpecs(app.endpoints) | [authHeaderMethodSpec("IsAuthorized"), errResponseMethodSpec("GetErrorResponse")]
          )
        )
      )
        
      let structName = "Default" + GoName(.name).out + "Impl "

      let defaultImplStruct = [.name] -> <sequence of TopLevelDecl> (name:
        Comment = "// " + structName + " ..."
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = structName
          )
        )
      )

      let newDefaultImpl = [.name] -> <sequence of TopLevelDecl> (name:
        let structName = "Default" + GoName(name).out + "Impl"
        let funcName = "New" + structName
        Comment = "// " + funcName + " for " + name
        FunctionDecl = name -> <FunctionDecl>(:
          FunctionName = funcName
          Signature = name -> <Signature> (:
            Parameters = name -> <Parameters>(:
              ParameterList = name -> <ParameterList>(:
                ParameterDecl = name -> <ParameterDecl>(:
                  Identifier = ""
                  TypeName = ""
                )
              )
            )

            Result = name -> <Result> (:
              TypeName = "*"+structName
            )
          )
          Block = name -> <Block>(:
            StatementList = [.] -> <sequence of StatementList>(item:
              Statement = item -> <Statement> (:
                ReturnStmt = item -> <ReturnStmt> (:
                  PayLoad = "&" + structName + "{}"
                )
              )
            )
          )
        )
      )

      Comment = "//\n//    THIS IS AUTOGENERATED BY sysl \n//\n"

      TopLevelDecl = defaultImplStruct | newDefaultImpl | svcImplInterface | epHandlerMethodDecl(app.endpoints, structName) | [authHeaderMethodDecl("IsAuthorized", structName), errResponseMethodDecl("GetErrorResponse", structName)]
    )
