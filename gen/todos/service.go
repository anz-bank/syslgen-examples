package todos

//
//    THIS IS AUTOGENERATED BY sysl
//

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.com/anz-bank/syslgen-examples/restlib"
)

// Service interface for Todos
type Service interface {
	GetComments(ctx context.Context, headers map[string]string, postid int64) (*restlib.HTTPResult, error)
	GetPosts(ctx context.Context, headers map[string]string) (*restlib.HTTPResult, error)
	GetTodosID(ctx context.Context, headers map[string]string, id int64) (*restlib.HTTPResult, error)
	PostComments(ctx context.Context, headers map[string]string, newpost *Post) (*restlib.HTTPResult, error)
}

// Client for Todos API
type Client struct {
	client *http.Client
	url    string
}

// NewClient for Todos
func NewClient(client *http.Client, serviceURL string) *Client {
	return &Client{client, serviceURL}
}

// GetComments ...
func (s *Client) GetComments(ctx context.Context, headers map[string]string, postid int64) (*restlib.HTTPResult, error) {
	required := []string{}
	responses := []interface{}{&Posts{}}
	u, err := url.Parse(fmt.Sprintf("%s/comments", s.url))
	if err != nil {
		return nil, err
	}

	q := u.Query()
	q.Add("postId", fmt.Sprintf("%v", postid))
	u.RawQuery = q.Encode()
	return restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, headers, required, responses)
}

// GetPosts ...
func (s *Client) GetPosts(ctx context.Context, headers map[string]string) (*restlib.HTTPResult, error) {
	required := []string{}
	responses := []interface{}{&Posts{}, &ResourceNotFoundError{}, &ErrorResponse{}}
	u, err := url.Parse(fmt.Sprintf("%s/posts", s.url))
	if err != nil {
		return nil, err
	}

	return restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, headers, required, responses)
}

// GetTodosID ...
func (s *Client) GetTodosID(ctx context.Context, headers map[string]string, id int64) (*restlib.HTTPResult, error) {
	required := []string{}
	responses := []interface{}{&Todo{}, &ResourceNotFoundError{}, &ErrorResponse{}}
	u, err := url.Parse(fmt.Sprintf("%s/todos/%v", s.url, id))
	if err != nil {
		return nil, err
	}

	return restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, headers, required, responses)
}

// PostComments ...
func (s *Client) PostComments(ctx context.Context, headers map[string]string, newpost *Post) (*restlib.HTTPResult, error) {
	required := []string{}
	responses := []interface{}{&Post{}}
	u, err := url.Parse(fmt.Sprintf("%s/comments", s.url))
	if err != nil {
		return nil, err
	}

	return restlib.DoHTTPRequest(ctx, s.client, "POST", u.String(), newpost, headers, required, responses)
}
