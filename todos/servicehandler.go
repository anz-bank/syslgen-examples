package todos

//
//    THIS IS AUTOGENERATED BY syslgen
//

import (
	"encoding/json"
	"net/http"

	restlib "github.com/anz-bank/syslgen-examples/lib"
)

// Handler interface for Todos
type Handler interface {
	GetCommentsHandler(w http.ResponseWriter, r *http.Request)
	GetPostsHandler(w http.ResponseWriter, r *http.Request)
	GetTodosIDHandler(w http.ResponseWriter, r *http.Request)
	PostCommentsHandler(w http.ResponseWriter, r *http.Request)
}

// ServiceHandler for Todos API
type ServiceHandler struct {
	serviceInterface ServiceInterface
}

// NewServiceHandler for Todos
func NewServiceHandler(serviceInterface ServiceInterface) *ServiceHandler {
	return &ServiceHandler{serviceInterface}
}

// GetCommentsHandler ...
func (s *ServiceHandler) GetCommentsHandler(w http.ResponseWriter, r *http.Request) {
	PostID := restlib.GetQueryParam(r, "postId")
	s.serviceInterface.GetComments(w, PostID)
}

// GetPostsHandler ...
func (s *ServiceHandler) GetPostsHandler(w http.ResponseWriter, r *http.Request) {
	s.serviceInterface.GetPosts(w)
}

// GetTodosIDHandler ...
func (s *ServiceHandler) GetTodosIDHandler(w http.ResponseWriter, r *http.Request) {
	ID := restlib.GetURLParam(r, "id")
	s.serviceInterface.GetTodosID(w, ID)
}

// PostCommentsHandler ...
func (s *ServiceHandler) PostCommentsHandler(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	var newPost Post

	decodeErr := decoder.Decode(&newPost)
	if decodeErr != nil {
		s.serviceInterface.SendErrorResponse(w, http.StatusBadRequest, "Error reading request body", decodeErr)
		return
	}

	s.serviceInterface.PostComments(w, newPost)
}

// GetHeaders ...
func (s *ServiceHandler) GetHeaders(w http.ResponseWriter, r *http.Request, headers []string, validate bool) (map[string]string, bool) {
	headerMap := map[string]string{}

	for _, header := range headers {
		headerValue := restlib.GetHeaderParam(r, header)
		if validate && headerValue == "" {
			s.serviceInterface.SendErrorResponse(w, http.StatusBadRequest, header+" header length is zero", nil)
			return headerMap, false
		}

		headerMap[header] = headerValue
	}

	return headerMap, true
}
