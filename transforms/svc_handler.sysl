CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^([A-Z]+[a-z]+|[A-Z]+|[a-z]+)$", word) then [word] else FindAllString("[a-z]+|[A-Z][a-z]+|[A-Z]+", word, -1)
      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(w)
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view ParamType(t <: sysl.Type) -> string:
    t -> (:
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "Double"
          "INT" => "Int64"
          "FLOAT" => "Float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "Bool"
          "DATE" => "Date"
          "DATETIME" => "Time"
        else "string"
      out = typeName
    )
    
  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "servicehandler.go"
    )
    
  !view makeValueExpr(strValue <: string) -> Expression:
    strValue -> (:
      ValueExpr = strValue
    )

  !view paramDecl(identifier <: string, typeName <: string) -> ParameterDecl:
    identifier -> (:
      Identifier = identifier
      TypeName = typeName
    )

  !view varDecl(name <: string, typeName <: string) -> VarDecl:
    name -> (:
      identifier = name
      TypeName = typeName
    )

  !view handleError(condition <: string, errorCode <: string, errorMsg <: string, errorObj <: string) -> StatementList:
    condition -> (:
      Statement = condition -> <Statement> (:
        IfElseStmt = condition -> <IfElseStmt> (:
          Expression = makeValueExpr(condition)
          Block = condition -> <Block> (:
            let interfaceCall = condition -> <StatementList> (:
              Statement = condition -> <Statement> (:
                DeclareAndAssignStmt = condition -> <DeclareAndAssignStmt> (:
                  Variables = "errResp"
                  Expression = condition -> <Expression> (:
                    FunctionCall = condition -> <ReturnStmt> (:
                      FunctionName = "s.serviceInterface.GetErrorResponse"
                      FunctionArgs = condition -> <FunctionArgs> (:
                        Expression = makeValueExpr(errorCode)
                        let errMsgExpr = condition -> <FuncArgsRest> (:
                          Expression = makeValueExpr(errorMsg)
                        )
                        let errObjExpr = condition -> <FuncArgsRest> (:
                          Expression = makeValueExpr(errorObj)
                        )
                        FuncArgsRest = [errMsgExpr, errObjExpr]
                      )
                    )
                  )
                )
              )
            )
            let sendResp = condition -><StatementList> (:
              Statement = condition -><Statement> (:
                FunctionCall = condition -> <ReturnStmt> (:
                  FunctionName = "restlib.SendHTTPResponse"
                  FunctionArgs = condition -> <FunctionArgs> (:
                    Expression = makeValueExpr("w")
                    let badRequestExpr = condition -> <FuncArgsRest> (:
                      Expression = makeValueExpr("http.StatusBadRequest")
                    )
                    let errRespExpr = condition -> <FuncArgsRest> (:
                      Expression = makeValueExpr("errResp")
                    )
                    FuncArgsRest = [badRequestExpr, errRespExpr]
                  )
                )
              )
            )

            let returnStmt = condition -> <StatementList> (:
              Statement = condition -> <Statement> (:
                ReturnStmt = condition -> <ReturnStmt> (:
                  PayLoad = ""
                )
              )
            )
            StatementList = [interfaceCall, sendResp, returnStmt]
          )
        )
      )
    )

  !view structVarDecl(bodyParams <: BodyParams) -> sequence of StatementList:
    bodyParams -> (param:
      Statement = param -> <Statement>(:
        VarDecl =varDecl(param.paramName, param.paramType)
      )
    )
    
  !view jsonDecode(bodyParams <: BodyParams, packageName <: string) -> Block:
    packageName -> (:
      let decodeErr = "decodeErr"
      let decodeStmts = bodyParams -> <StatementList> (param:
        Statement = param -> <Statement> (:
          DeclareAndAssignStmt = param -> <DeclareAndAssignStmt> (:
            Variables = decodeErr
            Expression = param -> <Expression> (:
              FunctionCall = param -> <FunctionCall> (:
                FunctionName = "decoder.Decode"
                FunctionArgs = param -> <FunctionArgs> (:
                  Expression = makeValueExpr("&" + param.paramName)
                )
              )
            )
          )
        )
      )
      let condition = decodeErr + " != nil"
      let errorCode = "http.StatusBadRequest"
      let errMsg = '"Error reading request body"'

      StatementList = decodeStmts | [handleError(condition, errorCode, errMsg, decodeErr)]
    )

  !view methodDef(ep <: sysl.Endpoint) -> string:
    ep -> (:
      let terms = ep.value.pathvars -> <out> (:
        out = "{" + .name + "}"
      )
      let pathVars = terms flatten(.out)
      let path = Split(ep.value.path, "/")
      let method = Title(ToLower(ep.value.method))

      let methodPostfix = path -> <string> (p:
        let postfix  = if p in pathVars then Join(ep.value.pathvars flatten(.name), "") else p
        out = Title(ToLower(postfix))
      )

      methodName = GoName(method + Join(methodPostfix flatten(.out), "")).out
    )

  !view epHandlerMethodSpecs(eps <: set of sysl.Endpoints) -> sequence of MethodSpec:
    eps -> (ep:
      MethodName = methodDef(ep).methodName + "Handler"
      Signature = ep -> <Signature> (:
        Parameters = ep -> <Parameters>(:
          ParameterList = ep -> <ParameterList>(:
            ParameterDecl = paramDecl("w", "http.ResponseWriter")
            ParameterDeclC = [ep] -> <ParameterDeclC>(:
              ParameterDecl = paramDecl("r", "*http.Request")
            )
          )
        )
      )
    )

  !view getParamStatements(paramList <: ParamList, methodName <: string) -> sequence of StatementList:
    paramList -> (param:
      Statement = param -> <Statement> (:
        DeclareAndAssignStmt = param -> <DeclareAndAssignStmt> (:
          Variables = param.varName
          Expression = param -> <Expression> (:
            FunctionCall = param -> <FunctionCall> (:
              FunctionName = methodName
              FunctionArgs = param -> <FunctionArgs> (:
                Expression = makeValueExpr("r")
                FuncArgsRest = [param] -> <FuncArgsRest> (:
                  Expression = makeValueExpr('"' + param.paramName + '"')
                )
              )
            )
          )
        )
      )
    )

  !view validateHeaders(ep <: sysl.Endpoint) -> sequence of StatementList:
    ep.value.params where("header" in .attrs.patterns && "required" in .attrs.patterns) -> (param:
      let condition = GoName(param.attrs.name).out + ' == ""'
      let errorCode = "http.StatusBadRequest"
      let errMsg = '"' + param.attrs.name + ' header length is zero"'
      Statement = handleError(condition, errorCode, errMsg, "nil").Statement
    )  

  !view declareHeaders(variableName <: string, typeName <: string, values <: sequence of string) -> StatementList:
    typeName -> (:
      Statement = typeName -> <Statement> (:
        DeclareAndAssignStmt = typeName -> <DeclareAndAssignStmt> (:
          Variables = variableName
          Expression = typeName -> <Expression> (:
            NewSlice = typeName -> <NewSlice> (:
              TypeName = typeName
              let v = values -> <sequence of string> (:
                out = '"' + . + '"'
              )
              SliceValues = Join(v flatten(.out), ',')
            )
          )   
        )
      )
    )
  
  !view getReqVars(allParams <: AllParams) -> Block:
    allParams -> (:
      let qParamStatements = getParamStatements(allParams.QueryParams, "restlib.GetQueryParam")
      let headerStatements = getParamStatements(allParams.HeaderParams, "restlib.GetHeaderParam")
      let pathParamStatements = getParamStatements(allParams.PathParams, "restlib.GetURLParam")
      StatementList = qParamStatements | headerStatements | pathParamStatements
    )

  !view getBodyParams(bodyParams <: BodyParams, packageName <: string) -> Block:
    packageName -> (:
      let decoder = jsonDecoder("decoder")
      let structVarDecl = structVarDecl(bodyParams)
      let jsonDecode = jsonDecode(bodyParams, packageName).StatementList

      StatementList = [decoder] | structVarDecl | jsonDecode
    )

  !view getAllParams(ep <: sysl.Endpoint) -> AllParams:
    ep -> (:
      let queryParams = ep.value.queryvars -> <QueryParams> (param:
        paramType = ParamType(param).out
        paramName = param.name
        varName = GoName(param.name).out
      )
      let pathParams = ep.value.pathvars -> <PathParams> (param:
        paramType = ParamType(param).out
        paramName = param.name
        varName = GoName(param.name).out
      )
      let reqHeaderParams = ep.value.params where("header" in .attrs.patterns && "required" in .attrs.patterns) -> <HeaderParams> (param:
        paramType = ParamType(param).out
        paramName = param.attrs.name
        varName = GoName(param.attrs.name).out
        isOptional = false
      )
      let optHeaderParams = ep.value.params where("header" in .attrs.patterns && "optional" in .attrs.patterns) -> <HeaderParams> (param:
        paramType = ParamType(param).out
        paramName = param.attrs.name
        varName = GoName(param.attrs.name).out
        isOptional = true
      )
      let bodyParams = ep.value.params where("body" in .attrs.patterns) -> <BodyParams> (param:
        paramType = GoName(param.type_ref).out
        paramName = param.name
        varName = param.name
      )
      QueryParams = queryParams
      PathParams = pathParams
      HeaderParams = reqHeaderParams | optHeaderParams
      BodyParams = bodyParams
      AllParams = queryParams flatten(.varName) | pathParams flatten(.varName) | bodyParams flatten(.varName) | reqHeaderParams flatten(.varName) | optHeaderParams flatten(.varName)
    )

  !view jsonDecoder(decoderName <: string) -> StatementList:
    decoderName -> (:
      Statement = decoderName -> <Statement>(:
        DeclareAndAssignStmt = decoderName -> <DeclareAndAssignStmt>(:
          Variables = decoderName
          Expression = decoderName -> <Expression> (:
            FunctionCall = decoderName -> <FunctionCall> (:
              FunctionName = 'json.NewDecoder'
              FunctionArgs = decoderName -> <FunctionArgs> (:
                Expression = makeValueExpr("r.Body")
              )
            )
          )
        )
      )
    )
    
  !view verifyAuthHeaders(ep <: sysl.Endpoint) -> Block:
    ep -> (:
      let condition = '!s.serviceInterface.IsAuthorized(r, Authorization)'
      # Following statement causes gosimple error by golangci-lint
      # let condition = 's.serviceInterface.IsAuthorized(r, Authorization) == false'
      let errorCode = "http.StatusUnauthorized"
      let errMsg = '"Invalid authorization"'

      StatementList = [handleError(condition, errorCode, errMsg, "nil")]
    )

  !view splitPayload(payload <: set of string) -> sequence of string:
    payload -> (:
      typeName = GoName(.).out
    )

  !view splitReturnTypes(types <: map) -> sequence of string:
    types -> (v:
      typeName = GoName(v.value).out
    )

  !view EpHandlerMethodDecl(eps <: set of sysl.Endpoints, packageName <: string) -> sequence of TopLevelDecl:
    eps -> (ep:
      let implFuncName = methodDef(ep).methodName
      let funcName = implFuncName + "Handler"
      let allParams = getAllParams(ep)
      let hasNoPayload = if ep.value.ret.payload == null then true else false
      Comment = '// ' + funcName + ' ...'
      MethodDecl = ep -> <MethodDecl>(:
        Receiver = ep -> <Receiver>(:
          ReceiverType = "s *ServiceHandler"
        )
        FunctionName = funcName
        Signature = ep -> <Signature> (:
          Parameters = ep -> <Parameters>(:
            ParameterList = ep -> <ParameterList>(:
              ParameterDecl = paramDecl("w", "http.ResponseWriter")
              ParameterDeclC = [ep] -> <ParameterDeclC>(:
                ParameterDecl = paramDecl("r", "*http.Request")
              )
            )
          )
        )
        let httpStatusString = "httpStatus"
        let httpStatus = ep -> <Statement> (:
          Statement = ep -> <Statement> (:
            VarDecl = varDecl(httpStatusString, "int")
          )
        )
        let resultTypes = if hasNoPayload then splitReturnTypes(ep.value.ret) else splitPayload(Split(ep.value.ret.payload, ', '))
        let tempReturnValues = if resultTypes count > 0 then "headerMap, " + Join(resultTypes flatten(.typeName),", ") else "headerMap"
        let returnValues = if hasNoPayload then tempReturnValues else "Status, " + tempReturnValues
    
        let retStatusStatement = ep -> <StatementList> (:
          StatementList = ep.value.ret -> <StatementList> (v:
            let condition = v.value + " != nil"
            Statement = ep -> <Statement> (:
              IfElseStmt = condition -> <IfElseStmt> (:
                Expression = makeValueExpr(condition)
                Block = condition -> <Block> (:
                  let sendStatus = condition -> <Statement> (:
                    Statement = condition -> <Statement> (:
                      AssignStmt = condition -> <AssignStmt> (:
                        Variables = httpStatusString
                        Expression = makeValueExpr(v.key)
                      )
                    )
                  )
                  let errorRes = condition -> <Statement> (:
                    Statement = condition -> <Statement> (:
                      DeclareAndAssignStmt = condition -> <DeclareAndAssignStmt> (:
                        Variables = "errResp"
                        Expression = condition -> <Expression> (:
                          FunctionCall = condition -> <Statement> (:
                            FunctionName = "s.serviceInterface.GetErrorResponse"
                            FunctionArgs = condition -> <FunctionArgs> (:
                              Expression = makeValueExpr(httpStatusString)
                              let errMsgExpr = condition -> <Expression> (:
                                Expression = makeValueExpr('"Internal server error"')
                              )
                              let errObjExpr = condition -> <Expression> (:
                                Expression = makeValueExpr("nil")
                              )
                              FuncArgsRest = [errMsgExpr, errObjExpr]
                            )
                          )
                        )
                      )
                    )
                  )
                  let sendResErr = condition -> <Statement> (:
                    Statement = condition -> <Statement> (:
                      FunctionCall = condition -> <Statement> (:
                        FunctionName = "restlib.SendHTTPResponse"
                        FunctionArgs = condition -> <FunctionArgs> (:
                          Expression = makeValueExpr("w")
                          let errRespExpr = condition -> <Expression> (:
                            Expression = makeValueExpr("errResp")
                          )
                          let a = condition -> <FuncArgsRest> (:
                            Expression = makeValueExpr(httpStatusString)
                          )
                          FuncArgsRest = [a, errRespExpr]
                        )
                      )
                    )
                  )
                  let sendRes = condition -> <Statement> (:
                    Statement = condition -> <Statement> (:
                      FunctionCall = condition -> <Statement> (:
                        FunctionName = "restlib.SendHTTPResponse"
                        FunctionArgs = condition -> <FunctionArgs> (:
                          Expression = makeValueExpr("w")
                          let a = condition -> <FuncArgsRest> (:
                            Expression = makeValueExpr(httpStatusString)
                          )
                          let b = condition -> <FuncArgsRest> (:
                            Expression = makeValueExpr(v.value)
                          )
                          FuncArgsRest = [a, b]
                        )
                      )
                    )
                  )
                  let retStatement = condition -> <Statement> (:
                    Statement = condition -> <Statement> (:
                      ReturnStmt = condition -> <ReturnStmt> (:
                        PayLoad = ""
                      )
                    )
                  )
                  StatementList = if MatchString("^[4-5][0-9][0-9]$", v.key) then [sendStatus, errorRes, sendResErr, retStatement] else [sendStatus, sendRes, retStatement]
                )
              )
            )
          )
        )
        Block = ep -> <Block>(:
          let implCall = ep -> <Statement> (:
            Statement = ep -> <Statement> (:
              DeclareAndAssignStmt = ep -> <DeclareAndAssignStmt> (:
                Variables = returnValues
                Expression = ep -> <Expression> (:
                  FunctionCall = ep -> <FunctionCall> (:
                    FunctionName = "s.serviceInterface." + implFuncName
                    FunctionArgs = ep -> <FunctionArgs> (:
                      Expression = makeValueExpr(Join(allParams.AllParams, ", "))
                    )
                  )
                )
              )
            )
          )
          let setHeadersCall = ep -> <Statement> (:
            Statement = ep -> <Statement> (:
              FunctionCall = ep -> <FunctionCall> (:
                FunctionName = "restlib.SetHeaders"
                FunctionArgs = ep -> <FunctionArgs> (:
                  Expression = makeValueExpr("w")
                  FuncArgsRest = [ep] -> <FuncArgsRest> (:
                    Expression = makeValueExpr("headerMap")
                  )
                )
              )
            )
          )
          let sendResExist = ep -> <Statement> (:
            Statement = ep -> <Statement> (:
              let values = if hasNoPayload then splitReturnTypes(ep.value.ret) else splitPayload(Split("status, " + ep.value.ret.payload, ', '))
              FunctionCall = ep -> <Statement> (:
                FunctionName = "restlib.SendHTTPResponse"
                FunctionArgs = ep -> <FunctionArgs> (:
                  Expression = makeValueExpr("w")
                  let restParams = values -> <Expression>(v:
                    Expression = makeValueExpr(v.typeName)
                  )
                  FuncArgsRest = restParams
                ) 
              )
            )
          )

          let funcCalls =  if hasNoPayload then [implCall] | [httpStatus] | [setHeadersCall]| retStatusStatement.StatementList else [implCall] | [setHeadersCall] | [sendResExist]
          
          let commonStmtList = getReqVars(allParams).StatementList | validateHeaders(ep)
          let stmtList = if ep.value.params where("header" in .attrs.patterns && "required" in .attrs.patterns && .attrs.name == "Authorization") count > 0 then commonStmtList | verifyAuthHeaders(ep).StatementList else commonStmtList
          StatementList = if ep.value.method ==:
            "GET" => stmtList | funcCalls
            "POST" => stmtList  | getBodyParams(allParams.BodyParams, packageName).StatementList | funcCalls
            "PUT" => stmtList  | getBodyParams(allParams.BodyParams, packageName).StatementList | funcCalls
            "DELETE" => stmtList  | funcCalls
        )
      )
    )

  !view goFile(app <: sysl.App) -> goFile:
    app -> (:
      PackageClause = app -> <PackageClause> (:
        let pname = if .attrs.package != null then .attrs.package else app.name
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let spec = ["encoding/json", "net/http", "github.com/anz-bank/syslgen-examples/restlib"] -> <ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec
      )

      let serviceImplVarname = "serviceInterface"

      let svcInterface = [.name] -> <TopLevelDecl> (name:
        let title = "Handler"
        Comment = "// Handler interface for "  + name
        Declaration = title -> <Declaration>(:
          InterfaceType = title -> <InterfaceType>(:
            InterfaceName = title
            MethodSpec =  epHandlerMethodSpecs(app.endpoints)
          )
        )
      )
      
      let serviceHandlerStruct = [.name] -> <TopLevelDecl> (name:
        Comment = "// ServiceHandler for " + name + " API"
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = "ServiceHandler"
            
            let svcHandlerField = name -> <FieldDecl>(:
              identifier = serviceImplVarname
              Type = "ServiceInterface"
            )

            FieldDecl = [svcHandlerField]
          )
        )
      )

      let newServiceHandler = [.name] -> <TopLevelDecl> (name:
        Comment = "// NewServiceHandler for " + name
        FunctionDecl = name -> <FunctionDecl>(:
          FunctionName = "NewServiceHandler"
          Signature = name -> <Signature> (:
            Parameters = name -> <Parameters>(:
              ParameterList = name -> <ParameterList>(:
                ParameterDecl = paramDecl(serviceImplVarname, "ServiceInterface")
              )
            )

            Result = name -> <Result> (:
              TypeName = "*ServiceHandler"
            )
          )
          Block = name -> <Block>(item:
            StatementList = [item] -> <StatementList>(item:
              Statement = item -> <Statement> (:
                ReturnStmt = item -> <ReturnStmt> (:
                  PayLoad = "&ServiceHandler{" + serviceImplVarname + "}"
                )
              )
            )
          )
        )
      )

      Comment = "//\n//    THIS IS AUTOGENERATED BY sysl \n//\n"
      
      TopLevelDecl = svcInterface | serviceHandlerStruct | newServiceHandler | EpHandlerMethodDecl(app.endpoints, pname)
    )
